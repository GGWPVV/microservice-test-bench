version: "3.8"
services:
  user_service:
    build:
      context: ./projects/user_service
    volumes:
      - ./projects/user_service/alembic/versions:/app/alembic/versions
    ports:
      - "8000:8000"
    container_name: user_service
    environment:
      - DB_URL=postgresql://userpostgres:userpassword@userdb:5432/userdb
    depends_on:
      - userdb
      - kafka
    networks:
      - app-network

  discount_service:
    build:
      context: ./projects/discount_service
    ports:
      - "8002:8000"
    container_name: discount_service
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - app-network

  userdb:
    image: postgres:16
    container_name: userdb
    environment:
      POSTGRES_USER: userpostgres
      POSTGRES_PASSWORD: userpassword
      POSTGRES_DB: userdb
    ports:
      - "5432:5432"
    volumes:
      - userdb_data:/var/lib/postgresql/data
    networks:
      - app-network
  scoredb:
    image: postgres:16
    container_name: scoredb
    environment:
      POSTGRES_USER: scorepostgres
      POSTGRES_PASSWORD: scorepassword
      POSTGRES_DB: scoredb
    ports:
      - "5433:5432"
    volumes:
      - scoredb_data:/var/lib/postgresql/data
    networks:
      - app-network
  score-service:
    build: 
      context: ./projects/score_service
    volumes:
      -  ./projects/score_service/alembic/versions:/app/alembic/versions
    environment:
      - REDIS_HOST=redis
      - DB_URL=postgresql://scorepostgres:scorepassword@scoredb:5432/scoredb
    depends_on:
      - scoredb
      - redis
      - kafka
    ports:
      - "8003:8000"
    networks:
      - app-network
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    networks:
      - app-network
  
  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopass
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
  analytics_service:
    build:
      context: ./projects/analytics_service
    depends_on:
      - kafka
      - mongo
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=user.registered
      - MONGO_URI=mongodb://mongouser:mongopass@mongo:27017/?authSource=admin
      - MONGO_DB=analytics_db
    networks:
      - app-network
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - app-network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.2
    container_name: filebeat
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      - elasticsearch
      - kibana



  

volumes:
  userdb_data:
  scoredb_data:
  mongo_data:
  esdata:
  
networks:
  app-network:
    driver: bridge
    